// Arquivo Protocol70.hpp
// Criado em 11/10/2021 as 14:52 por Acrisio
// Definição da classe Protocol70

#pragma once
#ifndef _PROTOCOL70_HPP
#define _PROTOCOL70_HPP

#if defined(_WIN32)
#include <Windows.h>
#elif defined(__linux__)
#include "../../Projeto IOCP/TIMER/timer_manager.h"
#include "../../Projeto IOCP/THREAD POOL/job_pool.h"

#define CALLBACK
#endif

#include "../TYPE/ggauthprotocol_type.hpp"

class Protocol70 {
public:
	static UINT32 getVersion();
	static void decryptAnswer(GG_AUTH_DATA *_pAuthAnswer);
	static UINT32 encryptQuery(GG_AUTH_DATA *_pAuthQuery);
	static UINT32 getInformation(UINT32 _type, GG_AUTH_DATA *_pAuthAnswer);
	static UINT32 checkValidAnswer(GG_AUTH_DATA *_pAuthAnswer, UINT32 *_pReturnFlag);
	static UINT32 getAuthQuery(UINT32 *_pUserFlag, GG_VERSION *_pGGVer, CCSAuth2 *_pCCSAuth2, DWORD _nSequenceNum, DWORD _dwServerKey);
	static UINT32 loopAuth(unsigned char *_pByLastLoop1, DWORD *_pdwLoop1AuthArray, unsigned char *_pByLastLoop2, DWORD *_pdwLoop2AuthArray, GG_AUTH_DATA *_pAuthAnswer, UINT32 _nSequenceNum);
	static UINT32 checkAuthAnswer(UINT32 *_pUserFlag, GG_VERSION *_pGGVer, GG_AUTH_DATA *_pAuthAnswer, GG_AUTH_DATA *_pAuthChecked, UINT32 _nSequenceNum, UINT32 *_pdwLastValue4);

	static UINT_PTR setTimer();
#if defined(_WIN32)
	static VOID CALLBACK UpdateTimer(HWND, UINT, UINT_PTR, DWORD);
#elif defined(__linux__)
	static int UpdateTimer(void*, void*);
#endif

#if defined(__linux__)
	static void destroy();
#endif

	static void InitializeVersionDll();

	// delete copy and move constructors and assign operators
	Protocol70(Protocol70 const&) = delete;              // Copy constructor
	Protocol70(Protocol70&&) = delete;                   // Move constructor
	Protocol70& operator=(Protocol70 const&) = delete;   // Copy assign
	Protocol70& operator=(Protocol70&&) = delete;        // Move assign

protected:
	Protocol70() {};
	~Protocol70() {};

	static DWORD getRandomWord();

	static void encryptRound8(BYTE *_dst);
	static UINT32 CRC32(BYTE *_src, UINT32 _len, UINT32 _mask);
	static UINT32 CRC32_part(BYTE _src, UINT32 _mask, UINT32 _part);

	static INT32 loopAuthHash1(UINT32 _value);
	static INT32 loopAuthHash2(UINT32 _value);

	static void AlgorithmGenAuthData(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);

	// Shuffles
	static void AlgorithmShuffle_1(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_2(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_3(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_4(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_5(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_6(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_7(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_8(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_9(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_10(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_11(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_12(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_13(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_14(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_15(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_16(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_17(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_18(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_19(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_20(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_21(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_22(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_23(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_24(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_25(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_26(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_27(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_28(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_29(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_30(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_31(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_32(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_33(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_34(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_35(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_36(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_37(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_38(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_39(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_40(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_41(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_42(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_43(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_44(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_45(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_46(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_47(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_48(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_49(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);
	static void AlgorithmShuffle_50(GG_AUTH_DATA *_pSrc, GG_AUTH_DATA *_pDst, GG_VERSION *_pGGVer);

protected:
#if defined(_WIN32)
	static UINT_PTR m_TimerIdEvent;
#elif defined(__linux__)
	static stdA::timer_manager m_ManagerTimer;
	static stdA::job_pool m_JobPool;
	static stdA::timer *m_pTimer;
	static stdA::thread *m_pThread;
#endif
	static USHORT m_TimeValue;
	static DWORD m_VarShuffle;

	static constexpr unsigned short m_TimeTable[30] = {
		0x1F, 0x25, 0x01, 0x0E,
		0x0F, 0x14, 0x29, 0x17,
		0x09, 0x23, 0x1E, 0x26,
		0x08, 0x2B, 0x30, 0x31,
		0x0A, 0x10, 0x1A, 0x06,
		0x21, 0x11, 0x1B, 0x12,
		0x18, 0x13, 0x1D, 0x20,
		0x2E, 0x24
	};
	static constexpr unsigned short m_TimeTable2[14] = {
		0x03, 0x07, 0x0B, 0x0C, 0x0D, 0x15, 0x16,
		0x19, 0x1C, 0x22, 0x2A, 0x2D, 0x2F, 0x32
	};
	static constexpr UINT32 m_ValueTable[51] = {
			   0x0,     0xCC94F8A,    0x4F74E462,    0x84FA5245,
		0x665B5732,    0xED3AE7DB,    0xD17C5CF2,    0x7E70548B,
		0x186E3D2A,    0x0DA05ADE,    0x9399A053,    0x4F74E462,
		0x59A2406F,    0x665B5732,    0x74ACD075,    0xEBD9BE1F,
		0xDA93AB6F,    0x9A9BF237,    0x74B3FA59,    0xC1DCFD84,
		0xEAA533BB,    0xED3AE7DB,    0x84FA5245,    0xD6D407CC,
		0x29CDA7B9,    0x7E70548B,    0xE2F3D164,    0x1BD20DC4,
		0x4F74E462,    0x711C128F,    0x502AAD9B,    0x6FD4EE8E,
		0x051C3F17,    0x6CA2E929,    0x59A2406F,    0xE2EDAA09,
		0xA2435469,    0x772DAB95,    0xAA79D74E,    0x84FA5245,
		0x7E70548B,    0xA1BD48B1,    0x665B5732,    0x560DE452,
		0x59A2406F,    0xED3AE7DB,    0x81EDAEF5,    0x84FA5245,
		0x74D90704,    0x73EC245F,    0x7E70548B

	};
	static constexpr UINT32 m_ValueTable2[100] = {
		   0x8AF2FFC2,    0xAF709ECF,    0x04232F74,    0xDDC7CBA2,
		   0xA38DD25F,    0x01E5D4F3,    0x1889C8EC,    0xFC42A8FB,
		   0x3451C345,    0x7E27EA12,    0xC85DB4E1,    0x68CD7B93,
		   0xB6C66C1B,    0x7C9D2BB5,    0xBD079C1B,    0x9BEFCBE1,
		   0xAF56143B,    0x96EE2C51,    0x5E2ED7D2,    0x2CF2206E,
		   0x89A8743B,    0x31737761,    0x132BEDAE,    0x84ACF2A3,
		   0xEC03F384,    0xE7D4737C,    0x95976717,    0x3A56DA26,
		   0x2F2019BE,    0x3F79C809,    0x4BF8CCA4,    0xB6872F5F,
		   0xDA575F31,    0x81DADF81,    0xADB684CE,    0x81C989C8,
		   0x85402C94,    0x769E1E7C,    0x335B27FD,    0x219260E7,
		   0x99522841,    0x651E2062,    0x767D2ED9,    0x116B3D46,
		   0xAC06DBDE,    0xF6D27ADB,    0xED6600B9,    0xD6BC985B,
		   0x29E59EC4,    0x8262863E,    0x11DC4647,    0xEA2DF7AE,
		   0x8574F88B,    0xBF36DB14,    0x682866E9,    0xC405D4B9,
		   0x6A2E72AA,    0xF8E5E2E5,    0x6CD1EB18,    0x0C0EB6F3,
		   0x3F8A929B,    0xC2C83239,    0xA5715A6C,    0x0B8E16F3,
		   0x7D0FE2E4,    0xA7784378,    0x898E1D5C,    0x680E7A22,
		   0xAB36CA0E,    0x1E7A9D39,    0xA271CB52,    0x8B166C18,
		   0x4197D081,    0x9049A9F6,    0x68D2CCF4,    0x0D3D443C,
		   0xD79A7EE4,    0xA44C0E25,    0x6119B9AB,    0x55DDA818,
		   0xD6B74C91,    0xC22A145F,    0x17CDF9FF,    0xEB8C1332,
		   0xD585B01E,    0x824C64FC,    0xF1582458,    0x58B3FA03,
		   0x3D8E34F4,    0x4D3A8593,    0x7850B25D,    0x12FAE703,
		   0x84286FBB,    0x9A6CEFAD,    0x334E2C77,    0xA4B940CA,
		   0x54FCBACB,    0x015AFBB3,    0xAA9AFA2F,    0x8387B0C0
	};

	static constexpr DWORD m_ConstShuffle[17] = {
		0xA85B70C3, 0x37EC7C64, 0xA6CC2510, 0x9D40909B, 0xE450789F, 0x1A339554, 0x54A31038,
		0x6EA0E0B2, 0xDF774D66, 0xFFDC99F8, 0x1BD031E9, 0x6A01E805, 0x1F000059, 0x6A1CE802,
		0xFFFFFF59, 0x0085C075, 0x6A1BE8B3
	};

	static constexpr DWORD m_ConstShuffleArray[1000] = {
		0x45DBA2EB,    0x39EEAC7C,    0x3D01BD05,    0x0FB876CD,
		0x9D7BBE53,    0x3D449E67,    0x5652652F,    0xA509C6C3,
		0x2900A5C1,    0x0832FD19,    0xD8CD3D92,    0x4626E7B4,
		0x52F3FFEB,    0x202F62FA,    0x59EAACF6,    0x89874127,
		0xBFDC251A,    0x2FA55482,    0x43214B92,    0xD6C36C85,
		0xC813BED6,    0x6D2A4B58,    0x2D1A7110,    0xB533C166,
		0x155F33B7,    0x8037BFE6,    0x702CC6F6,    0xAF70F731,
		0x0FE90A35,    0xE25439A2,    0xB3E0C2BD,    0x2B0F5780,
		0x3D69CDC7,    0x2BF92025,    0x6ECEDECD,    0xB26B77D9,
		0x0757D4F7,    0xA19E1DE6,    0x095E91AE,    0xDBFBD195,
		0x162BD53B,    0x0EDA864F,    0x1D1863E7,    0x0E660D5C,
		0xD06D2A1C,    0xBA0705F6,    0x1173EC01,    0xC3156186,
		0xC0946B01,    0x2BDBF254,    0x9D088574,    0xA39097BB,
		0x5B290E94,    0xFBAFF3F1,    0xFA3FC6C8,    0x055FF752,
		0x2B948D4B,    0x91FA7245,    0xCF901565,    0x81DA27F4,
		0xA77D6F8F,    0x8656E7D8,    0x95931CE3,    0x80B89119,
		0x584C2DD8,    0x4149E811,    0xC2C032B9,    0xA952BD29,
		0xB5784EDE,    0x5A3CEF99,    0xF0AEF060,    0x443021AB,
		0x569A4AE9,    0x49A763C8,    0x96A6DC70,    0x0AEA5739,
		0x931AA980,    0x7732DD36,    0x2D406151,    0x52D8C629,
		0x0580E44C,    0x7B34D46B,    0x1C24049A,    0xB4A1F724,
		0x23648295,    0xCD57E0CE,    0x0B994FA5,    0xA8AE6092,
		0x852D1B03,    0xF6F169D9,    0x6349B918,    0x97789CFB,
		0x8445F81E,    0x6D9BE832,    0xBA9ABA5C,    0x289400D6,
		0xC762C03D,    0xBACDE442,    0x7B05EBF9,    0xD48D46BD,
		0xA6DDEBF9,    0x460EE680,    0x2B22A377,    0x02AAB506,
		0xCA4DF2CA,    0xB8C87486,    0x54789A4D,    0x4AA2E55A,
		0x9A0C5C38,    0x7891F8BA,    0x6D6119E4,    0x14EE6F10,
		0x9EC0A1BB,    0x0FE20AA5,    0xEE73C7F5,    0x09F69AD2,
		0x3FE25ADA,    0xE44300DF,    0x60471CC5,    0x70421E06,
		0x13EAEE1F,    0x8F2C94B0,    0x4A35800F,    0xF15A5435,
		0xA550D5E0,    0x88141ED0,    0x14C59C1A,    0x15C5C3E7,
		0x6ABC97D6,    0x689524A6,    0x678EC77D,    0x33EC0384,
		0xDC75CD59,    0x861530BB,    0xAAEA9AB1,    0xF3678D94,
		0x8224EEF0,    0x7B2DC977,    0x458F8C5E,    0xCEAEC7BE,
		0xD4425325,    0xBD345872,    0xE1B615CC,    0x2B294C3C,
		0x5B34A37E,    0xC7D46434,    0xF516CD83,    0x827F81C4,
		0x8EA55654,    0x3E737524,    0xF9292D3A,    0x8B1900CE,
		0xF6FCF45F,    0x6CAB03DB,    0x65559C2A,    0x9F7040B4,
		0x09B0E6F6,    0xF8E297B2,    0xC234A20B,    0x3529CA2D,
		0x515AB3A3,    0x4AA0A85E,    0x974CE835,    0xE69F0490,
		0x4652F3FC,    0xFB6FBF2A,    0x5DF6B530,    0x29599876,
		0x7E501F5A,    0x61C552BD,    0x8BC9B193,    0x86EEDE47,
		0x53BB8E55,    0x371CEB8E,    0xA95F55D8,    0x65B75CAB,
		0x6CFDE865,    0xD20A0206,    0x4FFE1865,    0x5F4CACF9,
		0x12ACA611,    0xCCE81DBD,    0xC64F62D3,    0xEB3536BB,
		0x0C414EE2,    0x8C6DB63B,    0xB5CAEC99,    0x71DA7077,
		0xA2433B40,    0x9BE355D7,    0xA4F70C31,    0xAAD204A6,
		0x7C2C12C3,    0x70E0604B,    0x0C4D4D31,    0xDD8659E0,
		0xF3835DD3,    0xA30D81DD,    0x44352402,    0xA29ED88C,
		0xBEBF7308,    0xAC922F36,    0x04582B2C,    0x82622824,
		0x16690DC9,    0xF447C3CE,    0xB52BC927,    0xE47AB14E,
		0xA2F961AF,    0x2263E40D,    0xCE19968B,    0x605D0C53,
		0xEAE62912,    0x9EA00A9A,    0xD7B9FBBF,    0x7F849FEB,
		0x66CACDAA,    0xD164ADCE,    0x58727F4C,    0x9778F57E,
		0x8F1BD3DF,    0x72284631,    0xCAEDABAA,    0x43BE8373,
		0xEC42B518,    0xD9746C6B,    0xA482E561,    0x08B1D363,
		0xF5E70BFF,    0x9FDF98D4,    0x7FC9D709,    0x50086CE6,
		0x23622BEA,    0x2BB330F4,    0xC12AE8F9,    0xB22AC644,
		0x1C5ABF71,    0xF5A6DE42,    0xF53C81CB,    0xB6805A35,
		0x3B292F2E,    0xA6110A57,    0x907959E5,    0xB5A2BF01,
		0x0565F168,    0xA59C2AAB,    0x3C57C8E0,    0x46284D6F,
		0xF4979FB6,    0x7A9FD8A6,    0x306F5733,    0xF15AADB8,
		0xAF27A0A1,    0x9DA18CEF,    0x34188D68,    0x2FEF4674,
		0x8FAC9DB1,    0x874CACD0,    0x91FCD2E5,    0x7720903B,
		0x2B80ED5E,    0xCFE6D20F,    0xFE81CE44,    0x51C53375,
		0xEB59181F,    0xDE1885E5,    0xB330DA0A,    0x362698A9,
		0x5780B66E,    0x4B493E0A,    0x78918D92,    0xBDCB3750,
		0xF8AD20D1,    0x7E0364E5,    0xA61C5083,    0x4E3B96F2,
		0x5528FDE1,    0xFFCC9FF0,    0xC549C944,    0x62FF3F17,
		0xD698A506,    0x571E47C1,    0x5B9F626F,    0x9F709937,
		0x0476C1B7,    0xFD7FF5C1,    0xD297935A,    0x50433CC9,
		0x763AB88E,    0x79573088,    0xC1B9F2AD,    0x2AD3A147,
		0x946C12F1,    0x3430617E,    0xA18DE9D2,    0x87B74F47,
		0xD7744879,    0xD5B01E2A,    0xF88B0050,    0xFE66AF42,
		0xD6FAE19E,    0xC421D106,    0x302ACDAE,    0x075957BF,
		0x095565D8,    0x893902A8,    0xF1F39A55,    0x1B08B128,
		0xE92E4DAE,    0x8D314789,    0x916E1EED,    0xB11B6513,
		0xECEDF08A,    0x68D0FA11,    0xBA03B2CE,    0x71DAD9FA,
		0xAD0A1602,    0x9070B2E7,    0xB44AFD8F,    0xB4FC7743,
		0x911D17AF,    0x9F97F865,    0x35BB57A9,    0x11CAE696,
		0x428D7CD8,    0xFCDE2321,    0x97DD5895,    0xF0FC9F6D,
		0x17E3BC27,    0x1F8DEBA4,    0x721979D9,    0xFAEA092E,
		0x98A75002,    0x814CA956,    0x4CF7310D,    0x861CBC63,
		0x4E51EF03,    0xC992E4BE,    0x8F1F297B,    0x2C192092,
		0xB079C1A0,    0x60F92456,    0xA2C8A8C9,    0x556ADE44,
		0x47768E51,    0xCCD7E1B4,    0x4EBC4671,    0x98784DF0,
		0x89D2BF90,    0x77B5A441,    0xDA419B09,    0x6DD8F610,
		0x0023BBF4,    0x092BF495,    0xDEF0F0EA,    0x4CF5602A,
		0x34E22AF4,    0xE8A03918,    0xD2510C9B,    0xBE6623B7,
		0x8B866509,    0x8EAEFC51,    0x3FEB27A6,    0x3AA2974F,
		0x9F9913BB,    0x82BBC4DA,    0x8C18F991,    0x4822454A,
		0xD791AC81,    0x5D400A09,    0x426EEBD5,    0x716EC44F,
		0xCCF789E5,    0x76E55467,    0x077675FA,    0x2C0E8CC8,
		0xE533505D,    0x65021C9C,    0x25981D68,    0xF25AF62B,
		0xAAED8C62,    0xA33EE9EF,    0x447C6DB6,    0x4909B911,
		0xB38D929C,    0xB6F3340A,    0xCA79DC5E,    0xBB643DF2,
		0x698A0C53,    0x19B78443,    0x4119E3D6,    0xAF23EA55,
		0x437E513F,    0x41034153,    0x21E228B7,    0xBEAE69A4,
		0xDACF0AA7,    0xC85E1492,    0x006DF669,    0x5F6D2175,
		0x9405AD34,    0x25326487,    0x5802E273,    0x0AF7AB31,
		0x1CBA946E,    0xC015B9CC,    0x9058765F,    0x38D56E70,
		0xB74567AD,    0x32818BA7,    0x41C83993,    0x8070F2AA,
		0x0F3DAD79,    0x020C63C1,    0xE2EB83A8,    0x6A6DBF56,
		0x9B2BBE79,    0x980EB8A2,    0xFB370D16,    0x6E173E0D,
		0xD36732F6,    0x8D0102C2,    0xF4251E64,    0xE515F628,
		0x3FA981A8,    0x489BDA98,    0x663C5E0C,    0x76EE8F4D,
		0x584844D7,    0x4136B79E,    0xD8F62674,    0x9AFB42D4,
		0xA6CEE33B,    0x2168015A,    0xA2E92D55,    0xC7C4D667,
		0xAFB1D42C,    0x5E8A6155,    0x6D7ECBF7,    0x97F1936C,
		0xDD8AB121,    0x53434E06,    0xA03D8802,    0x62DA226C,
		0xB7D0F1C3,    0xA50D10F7,    0xC3AEEDED,    0xDE16FAEF,
		0xC6FD1D8A,    0xCE4E709E,    0x6F386112,    0x450E735D,
		0x81889CDE,    0x35AFD575,    0xEB648D27,    0x5F5A464E,
		0x7008F646,    0x7378B702,    0xEFCBC895,    0x7262DA29,
		0x1BF6B34C,    0x0E518FDD,    0xD4D3AAD4,    0x28BEA787,
		0xEBCA6C66,    0x70C1E360,    0x3104AB6B,    0xD8D535D0,
		0x77FB682D,    0x21424E22,    0x7EE854E4,    0x2B400DAC,
		0x271340F9,    0xB74A35AA,    0x34E51CA5,    0x88789663,
		0x94A89A51,    0x8C421251,    0xE9948B57,    0x77F269AD,
		0x2513B0EF,    0x38D27CCF,    0x086D0A52,    0x70390CE1,
		0x72FC4AF9,    0x2171DB6C,    0x26E8302D,    0x0CC4DA98,
		0xE4BBAE38,    0xF199C8CF,    0xAD9D7552,    0xB22A684A,
		0x12E77604,    0x10C0AA51,    0x14E36267,    0xEBC4406F,
		0x74FA19E5,    0xF47F19AB,    0xF3647EC5,    0x2D2AD98E,
		0x837A2062,    0x373E7E33,    0xD3861104,    0x02E4BB11,
		0xC5E012F5,    0x40756071,    0x1BD2E49C,    0xE25A5FAE,
		0xB5B46734,    0xA8CB47FF,    0x53CF5D05,    0x63232BBE,
		0xD86D9878,    0xD6AABC23,    0xF4E7E7D6,    0xEFA8CAB9,
		0xA8952B58,    0x52882696,    0x95B01778,    0x0E81A126,
		0xACA29B5E,    0xB4FE1DC1,    0xAEA36763,    0x36264AAF,
		0x5C1D6DF0,    0x55630A29,    0x98486E3F,    0xE10F2C8A,
		0x317E1B98,    0xCC617339,    0x0A077463,    0xB6B3C070,
		0xD23D3CEC,    0x816EE387,    0x6C682269,    0x1EBBADD9,
		0x98E12844,    0x2DF4DF9D,    0x3602FFC7,    0x80704B2C,
		0x1903784A,    0x0799C1D1,    0xF14E74F6,    0x848722F3,
		0xBF0BB354,    0xC7B530DC,    0x24A4078E,    0x925BCBC4,
		0x127141FC,    0xD6D2A405,    0x48BC42F7,    0x3373BD08,
		0x98CDCBC8,    0xAB86A6F6,    0xD4FEACB8,    0xEE665047,
		0xDB87A821,    0xDE4B9D25,    0x60D19E5A,    0x3C9D3DF9,
		0x4226509E,    0xD887110B,    0x54EEBF45,    0x8380EBA6,
		0x66337CA9,    0x20D38B10,    0x399D7711,    0x6DC7D2C5,
		0xBE3673D8,    0x4EB682FC,    0x96765F36,    0x62DA7BEF,
		0xB297DD94,    0xBA9A8EF7,    0xD3F1DE3C,    0xE8206D8C,
		0xEAEE1265,    0xFDF5F8C8,    0x99A67C8A,    0x89421014,
		0xCF92BBE3,    0x8E6077C8,    0x3F0CB1B9,    0xBDB8FD1F,
		0xD83C3F66,    0xE663737F,    0x5D8C1641,    0xEAEAAB24,
		0x9E341795,    0x9B667565,    0x6CAE12AA,    0xBA50929C,
		0x8722D9D9,    0x17F1F302,    0xE2FA3E6C,    0x94914A1F,
		0x3E8E00AA,    0xF29B77FD,    0x5AF700FE,    0x01263C05,
		0x08CF0190,    0x93BD7980,    0x292FE2E9,    0x8878FFE6,
		0x9F6F6623,    0x92DF7061,    0xF9E86CA5,    0x911CEC49,
		0x4AF4B6CA,    0x5789F4E9,    0x41EB14CA,    0xB47D99A8,
		0xB1F7590E,    0x7B438DBF,    0x7A8054C0,    0x6A228079,
		0x4CDFE857,    0x5484843D,    0x1A4EC41E,    0x2AA24935,
		0x9426DA4D,    0x9DD580E9,    0xABCFDA3E,    0x7D663A83,
		0x11629748,    0xABAE195C,    0xA559F0B6,    0xE9E6FDCD,
		0x490CC7EF,    0x0887980E,    0xAFA5CD1F,    0xD8BAEA79,
		0xA68CD3AC,    0x3BE8A467,    0x010BBAD0,    0xE25AA721,
		0xBF7A42F5,    0xBD58B50F,    0x63234E53,    0x7D3DAE4A,
		0xFD5E9D53,    0x0551345D,    0x2E64F14E,    0x23EC576F,
		0xE69F4B6E,    0xAB59C8EA,    0xE9484B0A,    0x5CEF5807,
		0x05C7D47D,    0x17E9D92E,    0x1C55B51F,    0xAEAE1B99,
		0xDF5CC03A,    0xD278EFA1,    0x2F14C615,    0x83A117AF,
		0xDED6980B,    0x739073EB,    0xBBFD0754,    0x727FD5AF,
		0x99CFD369,    0x52B70C53,    0x3787DE73,    0xF492DC22,
		0x789EEAEC,    0x08671383,    0x2C3CC6FB,    0x807094AF,
		0x14CA530B,    0x1C162FE1,    0x01926454,    0xAEA29590,
		0xD4FCB830,    0xE66CB805,    0x5E221206,    0xD69F687B,
		0x507C6101,    0x1FA35659,    0x9B547789,    0x91D164E9,
		0xF1F204E7,    0x1E716264,    0x41AFEB64,    0x66EE2132,
		0x5EC50B6A,    0x6B5083AD,    0xF7AD0621,    0xCE3F381E,
		0xEF9FDDF2,    0x7FB611BD,    0x06D44136,    0x404CF0D4,
		0x2CC61326,    0xE12CB5EC,    0x04AD242C,    0x44AD012E,
		0x9ED3347F,    0x2929C6D2,    0x8BA0256A,    0x52DAD462,
		0xBD5EB856,    0xBF27EC07,    0xE355BE8A,    0x034AD019,
		0x0FCE1851,    0x1CAC80E2,    0xC21376F2,    0xCE86ADCB,
		0x0E9DDAE8,    0xC731190C,    0x8293E64B,    0x0B16B4FF,
		0x31517995,    0x495E3FED,    0xCB3E64FD,    0x62628B1F,
		0x10837ADE,    0x297B5AFD,    0xF38A8B70,    0x5CF29DB1,
		0x248B573C,    0xCF20F3B4,    0x94FFC05C,    0x415D6F4E,
		0xF4009727,    0xB3E491B9,    0x2517AD08,    0xD70D7B5E,
		0xE96CC237,    0x8E10BD75,    0x2F58B91D,    0x78784869,
		0x993541E4,    0x976CDE60,    0x194B5CF3,    0xAB375FE6,
		0x6EE4BBA5,    0x86308C12,    0x7B592F32,    0xE9B1265E,
		0xFF017804,    0xB4142FF3,    0xCD178952,    0xC8804749,
		0xA5042177,    0xC87F409B,    0x880012CA,    0xA22A1A3F,
		0x17742D87,    0x2AEA7671,    0x339A4304,    0x1F082598,
		0xBDCB14AB,    0x52DD190E,    0x665F83B6,    0x96A202FC,
		0x008F6F6D,    0xC9D0C2CA,    0x7AB57A29,    0xBF9029D2,
		0x87399543,    0x165BE85D,    0xF6458005,    0xD25AF0A3,
		0xBA412EB6,    0xB2E5130E,    0x73763EB1,    0x985711E7,
		0x113E924E,    0x2408CC87,    0x57D20BB6,    0x5820F326,
		0x25AA6A63,    0xF42A7A3E,    0x3CEF709D,    0xBA4D0FE8,
		0x6DEB1DAC,    0x8AD4959C,    0x891604DC,    0x2626EC94,
		0x52AA2473,    0x6F8DC539,    0xB7EF3FEB,    0x154302C3,
		0x8A4F166E,    0x1ACF739D,    0x6DF28944,    0x2F3BEAED,
		0x5F426BE6,    0x2400262F,    0x03978B9D,    0xCA780A8A,
		0x593AAB83,    0xF3DA5768,    0x12759C30,    0x7070ED22,
		0x1F903FCD,    0x21A39DF0,    0x10F554A3,    0xB8CC183C,
		0xF8DDBE1B,    0x1613402F,    0x889F2C7E,    0x0BD3F532,
		0x9F868006,    0x6874F8AD,    0xEFEBAB1B,    0xEF3F1BBA,
		0x69164E06,    0x716C2ED1,    0xBF613911,    0xEF66023D,
		0xD0145FA3,    0xE8656935,    0x8F887FF7,    0x60D12323,
		0x8CF75B55,    0x26E5115F,    0xB7C9D426,    0xFC081513,
		0xE348BAA3,    0xB275DFB8,    0xD0CDC036,    0x2A833076,
		0x7F8FF517,    0x149C1AC8,    0x71E9EC9F,    0x52DA2DD5,
		0xB7249417,    0xC5B44A16,    0xF2A8AED8,    0x2D6453B6,
		0x24BF1D3C,    0x4B53081C,    0xFC91817B,    0xF2CA3A81,
		0x4CA7FAEE,    0x1102CB50,    0xE62B0AEE,    0x69746AD0,
		0x9A85B2B4,    0xBC490B4B,    0x38FFA3AA,    0xDBEA5C19,
		0x93C1DD17,    0xA6803075,    0x8B55F346,    0xEE9488D6,
		0xD1F3D490,    0x765FF365,    0x46E5524C,    0x0D19748D,
		0xBB833EA5,    0x842DBB85,    0xF1265912,    0xBDE3AAB7,
		0xC90884EF,    0x6983016B,    0x14828F42,    0x787891DB,
		0x94FC2CA5,    0xACF94C70,    0x289F4C42,    0xC551C173,
		0x83C5A081,    0xA5E7044C,    0xA4D629AB,    0x2DF5C315,
		0x3E0C9809,    0x0DE5C147,    0x11BFBDE4,    0x16EEFE2A,
		0x1E286A96,    0x3B6A1C08,    0xF6B16077,    0x1BA2EB3A,
		0x9AB380C0,    0xA7FF5C09,    0xCB76ABEA,    0xB1AA20BD,
		0x5A33921E,    0xFA0C29B0,    0x184415A6,    0x526E173A,
		0xC61206FA,    0x9A29EC96,    0x46C42643,    0x8576582B,
		0x67D656EA,    0x02CE3C33,    0xEC7E5739,    0xD25A4916,
		0xB407F977,    0xC772711E,    0x82DA2F0F,    0xA2718484,
		0x362F8829,    0x53BF44A1,    0x815F162F,    0x9C6480ED,
		0x64A47A68,    0x3DFB1B72,    0x8077A42F,    0x18ABC6C8,
		0xC61057CC,    0xEECF610A,    0xF7C85288,    0x9FAECD9F,
		0xD4E987BC,    0xFC92BBC1,    0x5FCBA7B2,    0xB8E50DE8,
		0x27A793C1,    0xC1FE833E,    0x1FE81C44,    0xEBF70E2C,
		0x16D40273,    0xE55950EB,    0xDFB637A8,    0xA05E49E3,
		0x39E76C3A,    0xEE4DAB5E,    0x07AF6264,    0x70704595,
		0x19571A8E,    0x2630FAF0,    0x204935F1,    0xD2E68BC9,
		0x1DBDA3F6,    0x45BAC859,    0xB11D36E7,    0x4F1782F9,
		0xDD81AF0B,    0xA1459AE1,    0x3383CFBD,    0x4E9DD29B,
		0xC23B8726,    0xE457FA3F,    0x3C1288DD,    0x57EED338,
		0x5352B2EC,    0x767A4FCD,    0x1754E7CD,    0xF2731E47,
		0x2860D8C8,    0xCD142101,    0x69CF6616,    0xB8C42A52,
		0xAADB5231,    0x73CEF984,    0xBCDC7C40,    0xF0697FDF,
		0x502CA7BE,    0xFF0F5EBD,    0x6713B2D3,    0x52DA7657,
		0xB2EB6FD8,    0xCA41A816,    0x02FC9F26,    0x378EC652,
		0x489F0217,    0x6B0A8045,    0x260E9BE3,    0x360ED748,
		0x8BA209E3,    0x5AD36CA4,    0x3AC23E70,    0xB7D211A1,
		0xF2AAEBD3,    0x2F34C7B9,    0xA6A1F156,    0x53622D14,
		0x16003151,    0x3395260D,    0x12315B2D,    0x813672EB,
		0x7D5C52F3,    0x1D8E0317,    0xF7EAE53C,    0xC9D589CC,
		0x7115D632,    0x4576E551,    0xCD46052D,    0x93C9D91F,
		0xAAB53586,    0x54F64541,    0x0ACB4676,    0x7878EA5E,
		0x9EC20866,    0xA186A980,    0x38F33DA0,    0xEF7B4410,
		0xA7B5A66C,    0xD49E8B66,    0xDE443423,    0x613950DC,
		0x7D06B70E,    0x56B6739B,    0x5850FF75
	};

	static constexpr char m_szPathGameMon[30] = "c:\\game\\gameguard\\gamemon.des";
};

#endif // !_PROTOCOL70_HPP
